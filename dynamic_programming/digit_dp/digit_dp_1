#include<bits/stdc++.h>
using namespace std;
long long dp[20][180][2];
long long getdigits(long long x,vector<int> &digits){
    while(x){
        digits.push_back(x%10);
        x/=10;
    }
}
///we are memorizing only for tight = 0 so that the result can be used for
/// other values for a and b
long long digitsum(int idx,int sum,int tight,vector <int> digit){
    if(idx==-1)
        return sum;
    if(dp[idx][sum][tight]!=-1 and tight!=1){
        return dp[idx][sum][tight];
    }
    long long ret = 0;
    int k = tight?digit[idx]:9;
    for(int i=0;i<=k;i++){
        int newtight = (digit[idx]==i)?tight:0;
        ret+=digitsum(idx-1,sum+i,newtight,digit);
    }
    if(!tight)
        dp[idx][sum][tight]=ret;
    return ret;
}
int rangedigit(int a,int b){
    memset(dp,-1,sizeof(dp));
    vector <int> digitA;
    getdigits(a-1,digitA);
 
    long long ans1 = digitsum(digitA.size()-1,0,1,digitA);
 
    vector<int> digitB;
    getdigits(b,digitB);
 
    long long ans2 = digitsum(digitB.size()-1,0,1,digitB);
    return ans2-ans1;
 
}
int main(){
     long long a = 123, b =1024;
     cout<<"digits sum for given range"<<rangedigit(a,b)<<endl;
}
 
